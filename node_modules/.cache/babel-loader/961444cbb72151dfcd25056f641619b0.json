{"ast":null,"code":"var _jsxFileName = \"/Users/baby/Desktop/web Dev/Quotes-app/src/pages/QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport { useRouteMatch } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport { Link, useParams } from \"react-router-dom/cjs/react-router-dom.min\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { getSingleQuote } from \"../components/lib/api\";\nimport useHttp from \"../hooks/use-http\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\"; // const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n//   { id: \"q2\", author: \"payne\", text: \"Learning java is fun!\" },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteDetail = () => {\n  _s();\n\n  const params = useParams();\n  const match = useRouteMatch(); //useRouteMatch for avoiding manual path creation so that if we change path sometime\n  //we dont have to change path placeholders everywhere\n  //console.log(match);\n  //console.log(params);\n  //const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [sendRequest, params.quoteId]);\n  if (status === \"pending\") return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"centered\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n\n  if (!loadedQuote.text) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Quote Found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  } //we used nested route below to manipulate the loading comments link\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: loadedQuote.text,\n      author: loadedQuote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `/quotes/${params.quoteId}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: \"Load Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteDetail, \"t632IC4eHl1Jpa7P1TF2zQE+V00=\", false, function () {\n  return [useParams, useRouteMatch, useHttp];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"names":["useRouteMatch","Route","Link","useParams","Comments","HighlightedQuote","getSingleQuote","useHttp","useEffect","LoadingSpinner","QuoteDetail","params","match","sendRequest","status","data","loadedQuote","error","quoteId","text","author","url","path"],"sources":["/Users/baby/Desktop/web Dev/Quotes-app/src/pages/QuoteDetail.js"],"sourcesContent":["import { useRouteMatch } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport { Link, useParams } from \"react-router-dom/cjs/react-router-dom.min\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { getSingleQuote } from \"../components/lib/api\";\nimport useHttp from \"../hooks/use-http\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n//   { id: \"q2\", author: \"payne\", text: \"Learning java is fun!\" },\n// ];\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n  //useRouteMatch for avoiding manual path creation so that if we change path sometime\n  //we dont have to change path placeholders everywhere\n  //console.log(match);\n  //console.log(params);\n  //const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [sendRequest, params.quoteId]);\n\n  if (status === \"pending\")\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n\n  if (error) return <p className=\"centered\">{error}</p>;\n\n  if (!loadedQuote.text) {\n    return <p>No Quote Found!</p>;\n  }\n  //we used nested route below to manipulate the loading comments link\n  return (\n    <section>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={`/quotes/${params.quoteId}`} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </section>\n  );\n};\n\nexport default QuoteDetail;\n"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,2CAAhC;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAMC,MAAM,GAAGR,SAAS,EAAxB;EACA,MAAMS,KAAK,GAAGZ,aAAa,EAA3B,CAFwB,CAGxB;EACA;EACA;EACA;EACA;;EACA,MAAM;IACJa,WADI;IAEJC,MAFI;IAGJC,IAAI,EAAEC,WAHF;IAIJC;EAJI,IAKFV,OAAO,CAACD,cAAD,EAAiB,IAAjB,CALX;EAMAE,SAAS,CAAC,MAAM;IACdK,WAAW,CAACF,MAAM,CAACO,OAAR,CAAX;EACD,CAFQ,EAEN,CAACL,WAAD,EAAcF,MAAM,CAACO,OAArB,CAFM,CAAT;EAIA,IAAIJ,MAAM,KAAK,SAAf,EACE,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,uBACE,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;EAMF,IAAIG,KAAJ,EAAW,oBAAO;IAAG,SAAS,EAAC,UAAb;IAAA,UAAyBA;EAAzB;IAAA;IAAA;IAAA;EAAA,QAAP;;EAEX,IAAI,CAACD,WAAW,CAACG,IAAjB,EAAuB;IACrB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CA7BuB,CA8BxB;;;EACA,oBACE;IAAA,wBACE,QAAC,gBAAD;MAAkB,IAAI,EAAEH,WAAW,CAACG,IAApC;MAA0C,MAAM,EAAEH,WAAW,CAACI;IAA9D;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,KAAD;MAAO,IAAI,EAAG,WAAUT,MAAM,CAACO,OAAQ,EAAvC;MAA0C,KAAK,MAA/C;MAAA,uBACE;QAAK,SAAS,EAAC,UAAf;QAAA,uBACE,QAAC,IAAD;UAAM,SAAS,EAAC,WAAhB;UAA4B,EAAE,EAAG,GAAEN,KAAK,CAACS,GAAI,WAA7C;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,eASE,QAAC,KAAD;MAAO,IAAI,EAAG,GAAET,KAAK,CAACU,IAAK,WAA3B;MAAA,uBACE,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CA9CD;;GAAMZ,W;UACWP,S,EACDH,a,EAWVO,O;;;KAbAG,W;AAgDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}